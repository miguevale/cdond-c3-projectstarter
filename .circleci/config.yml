version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=`curl -H "token: 467a673b-2aac-46fd-b5e5-ab8c86e6bd78" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>`
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
             # Your code here
             cd frontend
             npm install
             npm run test 
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             # Your code here
             cd backend
             npm install
             npm run test 
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Front-end scan
          command: |
             # Your code here
             cd frontend
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
             # Your code here
             cd backend
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            URLS=$(aws ec2 describe-instances \
            --region us-east-1 \
            --query "Reservations[*].Instances[*].PublicIpAddress"  \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
            --output text) 
            curl -H "Content-Type: text/plain" \
            -H "token: 2efd54dc-5d4b-4bf7-ae21-1548a9e7fb40" \
            --request PUT --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}       

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [74:f8:5c:49:4c:8e:f7:4d:db:6b:e1:81:9a:95:c6:a8]
      - run:
          name: installing curl and awscli
          command: |
            apk add curl
            pip3 install awscli
            rm -rf /car/cache/apk/*
            aws --version 
      - run:
          name: getting inventory from memstash
          command: |
            curl -H "Content-Type: text/plain" \
            -H "token: 2efd54dc-5d4b-4bf7-ae21-1548a9e7fb40" \
            --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7} \
            >> .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install aws-cli
          command: |
            sudo apt-get install python3-pip
            pip3 install awscli
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            echo ENVIROMENT=$ENVIROMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            npm run migrations > migrations_text.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q 'has been executed successfully' migrations_text.txt
            then
              curl -H "Content-Type: text/plain" -H \
              "token: 467a673b-2aac-46fd-b5e5-ab8c86e6bd78" \
              --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              curl -H "Content-Type: text/plain" -H \
              "token: 467a673b-2aac-46fd-b5e5-ab8c86e6bd78" \
              --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            export BACKEND_IP=$(aws ec2 describe-instances \
            --region us-east-1 \
            --query "Reservations[*].Instances[*].PublicIpAddress"  \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" >> ".env" 
            npm install
            npm run build
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}         
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [74:f8:5c:49:4c:8e:f7:4d:db:6b:e1:81:9a:95:c6:a8]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update nodejs
            apk add --update npm
            apk add --update curl
            apk add --no-cache tar
            pip3 install awscli

      - run:
          name: building backend
          command: |
            cd backend
            npm install -g npm@latest
            npm i
            npm run build
            cp package* ./dist
            cd dist
            npm i
            cd ..
            tar -czf dist.tar.gz dist

      - run:
          name: getting inventory from memstash
          command: |
            curl -H "Content-Type: text/plain" \
            -H "token: 2efd54dc-5d4b-4bf7-ae21-1548a9e7fb40" \
            --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7} \
            >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
          no_output_timeout: 30m

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
#
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs
            apk add --update npm
            apk add curl
            pip3 install awscli
            rm -rf /car/cache/apk/*
            aws --version 
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/index.html"
            
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            sleep 5m
            BACKEND_IP=`curl -H "Content-Type: text/plain" \
            -H "token: 2efd54dc-5d4b-4bf7-ae21-1548a9e7fb40" \
            --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}`

            if curl -s http://${BACKEND_IP}:3030/api/status | grep "\"status\":\"ok\""
            then 
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install curl
      - run:
          name: Update cloudfront distribution
          command: |
            OldWorkflowID=$(aws cloudformation \
                          list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                          --no-paginate --output text | tr -d '\n')
            curl -H "Content-Type: text/plain" -H "token: e28b9702-0c82-459c-9601-0f3d7ec66919" \
                        --request PUT --data "${OldWorkflowID}" \
                        https://api.memstash.io/values/OldWorkflowID_${CIRCLE_WORKFLOW_ID:0:7}
            
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --tags project=udapeople \
            --stack-name "cloudfront" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
            
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(curl -H "Content-Type: text/plain" -H \
                            "token: e28b9702-0c82-459c-9601-0f3d7ec66919" \
                            --request GET https://api.memstash.io/values/OldWorkflowID_${CIRCLE_WORKFLOW_ID:0:7})
            
            echo $OldWorkflowID
            
            STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                     --stack-status-filter CREATE_COMPLETE --no-paginate --output text | tr -d '\n')
            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            
            then
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name frontend-${OldWorkflowID}
            fi
            

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      - deploy-infrastructure:
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #    filters:
      #      branches:
      #        only: [master]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #    filters:
      #      branches:
      #        only: [master]
      #- cleanup:
      #    requires: [cloudfront-update]
      #    filters:
      #      branches:
      #        only: [master]