version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
             # Your code here
             cd frontend
             npm install
             npm run test 
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             # Your code here
             cd backend
             npm install
             npm run test 
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Front-end scan
          command: |
             # Your code here
             cd frontend
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
             # Your code here
             cd backend
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            URLS=$(aws ec2 describe-instances \
            --region us-east-1 \
            --query "Reservations[*].Instances[*].PublicIpAddress"  \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
            --output text) 
            curl -H "Content-Type: text/plain" \
            -H "token: 2efd54dc-5d4b-4bf7-ae21-1548a9e7fb40" \
            --request PUT --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}       

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [74:f8:5c:49:4c:8e:f7:4d:db:6b:e1:81:9a:95:c6:a8]
      - run:
          name: installing curl
          command: |
            apk add curl
      - run:
          name: getting inventory from memstash
          command: |
            curl -H "Content-Type: text/plain" \
            -H "token: 2efd54dc-5d4b-4bf7-ae21-1548a9e7fb40" \
            --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7} \
            >> .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
#
  #run-migrations:
  #  docker:
  #    # Docker image here that supports NodeJS
  #  steps:
  #    # Checkout code from git
  #    - run:
  #        name: Run migrations
  #        command: |
  #          # Your code here
  #          exit 1
  #    - run:
  #        name: Send migration results to memstash
  #        command: |
  #          # Your code here
  #          exit 1
  #   # Here's where you will add some code to rollback on failure      
#
  #deploy-frontend:
  #  docker:
  #    # Docker image here that supports AWS CLI
  #  steps:
  #    # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Get backend url
  #        command: |
  #          # your code here
  #          export API_URL="http://${BACKEND_IP}:3030"
  #          echo "${API_URL}"
  #    - run:
  #        name: Deploy frontend objects
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure      
  #                  
  #deploy-backend:
  #  docker:
  #    # Docker image here that supports Ansible
  #  steps:
  #    # Checkout code from git
  #    # Add ssh keys with fingerprint
  #    # attach workspace
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Deploy backend
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure  
#
  #smoke-test:
  #  docker:
  #    # Lightweight Docker image 
  #  steps:
  #    # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Get backend url
  #        command: |
  #          # your code here
  #    - run:
  #        name: Backend smoke test.
  #        command: |
  #          # your code here
  #    - run:
  #        name: Frontend smoke test.
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure  
#
  #cloudfront-update:
  #  docker:
  #    # Docker image here that supports AWS CLI
  #  steps:
  #    # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Update cloudfront distribution
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure  
#
#cleanup:
  #  docker:
  #    # Docker image here
  #  steps:
  #    # Checkout code from git
  #    - run:
  #        name: Get old stack workflow id
  #        command: |
  #          # your code here
  #          export OldWorkflowID="the id here"
  #          export STACKS=[] #put the list of stacks here
  #    - run:
  #        name: Remove old stacks and files
  #        command: |
  #          if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #          then
  #            # your code here
  #          fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      #- run-migrations:
      #    requires: [configure-infrastructure]
      #- deploy-frontend:
      #    requires: [run-migrations]
      #- deploy-backend:
      #    requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]